@using Newtonsoft.Json
@model PowerPlantMvcApplication.Models.Dto.DiagramNodeDto
@{
    ViewData["Title"] = "Home Page";
}

@Html.Partial("_Sidebar")
@Html.Partial("_Topbar")

<head>
    <style> /* set the CSS */
          
          .node rect {
              fill: #fff;
              stroke: steelblue;
              stroke-width: 3px;
          }
          
          .node text { font: 12px sans-serif; }
          
          .node--internal text {
              text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;
          }
          
          .link {
              fill: none;
              stroke: #ccc;
              stroke-width: 2px;
          }
          
          </style>
    <script src="https://d3js.org/d3.v4.min.js"></script>

</head>

<div class="clearfix"></div>

<div class="content-wrapper">
    <div class="container-fluid">
        <div id="diagram">
            
        </div>
    </div>
</div>


<!--Start footer-->
<footer class="footer">
    <div class="container">
        <div class="text-center">
            Copyright © 2018 Dashtreme Admin
        </div>
    </div>
</footer>
<!--End footer-->

@section Scripts
{
    <script>
    
        var treeData = @Html.Raw(JsonConvert.SerializeObject(Model));
        // set the dimensions and margins of the diagram
        var margin = {top: 40, right: 90, bottom: 50, left: 90},
            width = 1750 - margin.left - margin.right,
            height = 750 - margin.top - margin.bottom;
    
        // declares a tree layout and assigns the size
        var treemap = d3.tree()
            .size([width, height]);
    
        //  assigns the data to a hierarchy using parent-child relationships
        var nodes = d3.hierarchy(treeData);
    
        // maps the node data to the tree layout
        nodes = treemap(nodes);
    
        // append the svg obgect to the body of the page
        // appends a 'group' element to 'svg'
        // moves the 'group' element to the top left margin
        var svg = d3.select("#diagram").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom),
            g = svg.append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");
    
        // adds the links between the nodes
        var link = g.selectAll(".link")
            .data( nodes.descendants().slice(1))
            .enter().append("path")
            .attr("class", "link")
            .attr("d", function(d) {
                return "M" + d.x + "," + d.y
                    + "C" + d.x + "," + (d.y + d.parent.y) / 2
                    + " " + d.parent.x + "," +  (d.y + d.parent.y) / 2
                    + " " + d.parent.x + "," + d.parent.y;
            });
    
        // adds each node as a group
        var node = g.selectAll(".node")
            .data(nodes.descendants())
            .enter().append("g")
            .attr("class", function(d) {
                return "node" +
                    (d.children ? " node--internal" : " node--leaf"); })
            .attr("transform", function(d) {
                return "translate(" + d.x + "," + d.y + ")"; });
    
        var _rectW = 150;
        var _rectH = 80;
        // adds the circle to the node
        
        node.append("rect")
            .attr("width", _rectW)
            .attr("height", _rectH)
            .attr("x", -(_rectW / 2))
            .attr("y", -(_rectH / 2))
            .attr("fill", "#898989");
    
        // adds the text to the node
        node.append("text")
            .attr("dy", ".35em")
            .attr("y", function(d) { return d.children ? -20 : 20; })
            .style("text-anchor", "middle")
            .text(function(d) { return d.data.name; });
    
    </script>
}